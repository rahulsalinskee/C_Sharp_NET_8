
What is the Interface Segregation Principle?

The Interface Segregation Principle (ISP) states that clients should not be forced to depend 1  on methods they don't use.  In other words, it's better to have several smaller, more specific interfaces than one large, general-purpose interface.  This prevents classes from being burdened with implementing methods they don't need, leading to cleaner and more maintainable code. Â  
1.
slideplayer.com
slideplayer.com

Why is ISP Important?

Decoupling: Smaller interfaces promote decoupling. Changes to one interface are less likely to affect other classes that implement different interfaces.
Flexibility: You can mix and match interfaces as needed, providing greater flexibility in class design.
Maintainability: Smaller interfaces are easier to understand and maintain. Changes are more localized.
Testability: It's easier to create mock implementations for smaller, focused interfaces during testing.
Example: The Classic Print Problem

Imagine you have a Document class and you want to provide printing functionality. A naive approach might be to create a single IPrintable interface:


public interface IPrintable
{
    void Print();
    void Scan();
    void Fax();
}

public class Document : IPrintable
{
    public void Print() { /* Implementation for printing */ }
    public void Scan() { /* Implementation for scanning */ }
    public void Fax() { /* Implementation for faxing */ }
}

public class SimplePrinter : IPrintable
{
    public void Print() { /* Implementation for printing */ }
    public void Scan() { throw new NotImplementedException(); } // Doesn't support scanning
    public void Fax() { throw new NotImplementedException(); } // Doesn't support faxing
}

The problem here is that SimplePrinter is forced to implement Scan() and Fax(), even though it doesn't support them.  This violates ISP.

Solution: Segregated Interfaces

Instead of one large interface, we create smaller, more specific interfaces:

C#

public interface IPrintable
{
    void Print();
}

public interface IScannable
{
    void Scan();
}

public interface IFaxable
{
    void Fax();
}

public class Document : IPrintable, IScannable, IFaxable
{
    public void Print() { /* Implementation for printing */ }
    public void Scan() { /* Implementation for scanning */ }
    public void Fax() { /* Implementation for faxing */ }
}

public class SimplePrinter : IPrintable
{
    public void Print() { /* Implementation for printing */ }
}

public class AdvancedPrinter : IPrintable, IScannable, IFaxable
{
    public void Print() { /* Implementation for printing */ }
    public void Scan() { /* Implementation for scanning */ }
    public void Fax() { /* Implementation for faxing */ }
}
Now, SimplePrinter only implements IPrintable, and it's not forced to implement methods it doesn't need.  AdvancedPrinter can implement all three interfaces.  This adheres to ISP.

Another Example: Order Processing

Let's consider an order processing system.  We might have different types of orders (e.g., online, phone, in-store).

C#

// Violates ISP - Single interface for all order types
public interface IOrderProcessor
{
    void ProcessOnlineOrder();
    void ProcessPhoneOrder();
    void ProcessInStoreOrder();
}
This is problematic because a class that only handles online orders would be forced to implement methods for phone and in-store orders.

Solution: Segregated Interfaces

C#

public interface IOnlineOrderProcessor
{
    void ProcessOnlineOrder();
}

public interface IPhoneOrderProcessor
{
    void ProcessPhoneOrder();
}

public interface IInStoreOrderProcessor
{
    void ProcessInStoreOrder();
}

public class OnlineOrderProcessor : IOnlineOrderProcessor
{
    public void ProcessOnlineOrder() { /* ... */ }
}

public class FullOrderProcessor : IOnlineOrderProcessor, IPhoneOrderProcessor, IInStoreOrderProcessor
{
    public void ProcessOnlineOrder() { /* ... */ }
    public void ProcessPhoneOrder() { /* ... */ }
    public void ProcessInStoreOrder() { /* ... */ }
}
Now, classes only implement the interfaces relevant to them.

Key Takeaways:

Break down large interfaces into smaller, more specific ones.
Classes should only implement the interfaces they need.
ISP promotes loose coupling, flexibility, and maintainability.
By following ISP, you create a more robust and adaptable codebase.  Remember to think about the different responsibilities your classes have and design your interfaces accordingly.